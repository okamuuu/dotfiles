" vi 互換モードを無効にする
set nocompatible

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

if has('mac')
  if exists('$LANG') && $LANG ==# 'ja_JP.UTF-8'
    set langmenu=ja_ja.utf-8.macvim
    set encoding=utf-8
    set ambiwidth=double
  endif
endif

filetype plugin indent off

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" Recommended to install
" After install, turn shell ~/.vim/bundle/vimproc, (n,g)make -f your_machines_makefile
NeoBundle 'Shougo/vimproc'
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimshell'
NeoBundle 'scrooloose/syntastic'
" NeoBundle 'thinca/vim-quickrun'

let g:quickrun_config = {}
let g:quickrun_config['_'] = {'runner': 'vimproc'}

NeoBundle 'ZenCoding.vim'
NeoBundle 'jelera/vim-javascript-syntax'
NeoBundle 'maksimr/vim-jsbeautify'
NeoBundle 'einars/js-beautify'
" NeoBundle 'basyura/jslint.vim'
" NeoBundle 'scrooloose/syntastic'
" NeoBundle 'bigfish/vim-js-beautify'
NeoBundle 'vim-scripts/yanktmp.vim'
NeoBundle 'airblade/vim-gitgutter.git'
" Color Scheme
NeoBundle 'altercation/vim-colors-solarized'

" PHP
" NeoBundle 'bpearson/vim-phpcs'

filetype plugin indent on

" Brief help
" :NeoBundleList          - list configured bundles
" :NeoBundleInstall(!)    - install(update) bundles
" :NeoBundleClean(!)      - confirm(or auto-approve) removal of unused bundles

" Installation check.
NeoBundleCheck

syntax enable

let g:Vimphpcs_Standard='PSR1'

let g:php_cs_fixer_path = "~/project/php-qatools/bin/php-cs-fixer"        " define the path to the php-cs-fixer.phar
let g:php_cs_fixer_level = "psr1"                " which level ?
let g:php_cs_fixer_config = "default"           " configuration
let g:php_cs_fixer_php_path = "php"             " Path to PHP
let g:php_cs_fixer_fixers_list = ""             " List of fixers
let g:php_cs_fixer_enable_default_mapping = 1   " Enable the mapping by default (<leader>pcd)
let g:php_cs_fixer_dry_run = 0                  " Call command with dry-run option
let g:php_cs_fixer_verbose = 0                  " Return the output of command if 1, else an inline information.

" gitgutter
let g:gitgutter_enabled = 0

" Don't make a backup before overwriting a file.
set nobackup                      
set nowritebackup                 

set noswapfile
" Keep swap files in one location
" set directory=$HOME/.vim/tmp//,.  

" 編集中のファイル名を表示
" 画面の左側に常時''行番''を表示する。
" ルーラーを表示する。
set title
set number
set ruler

" タブの見掛けの表示幅を4文字分にする。
" オートインデント時に使用するインデントの深さも4文字分にする。
" 自身がタブを入力時した際に、タブの代わりに4文字の半角スペースに置き換える
" タブを発見した場合は印つける
set tabstop=4
set shiftwidth=4 
set softtabstop=4
set list
set listchars=tab:>-

" タブが挿入された文章を編集する場合、タブの代わりに半角スペースに置き換えるようにする。
" 行頭の余白内でTabを打ち込むと'shiftwidth'の数だけインデントする。
set expandtab
set smarttab

" インクリメンタルサーチ
set incsearch

" 対括弧の表示
" モード表示
set showmatch
set showmode

" 全角スペースを視覚化する
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=white
match ZenkakuSpace /　/

" insert mode ではキーバインドをEmacs スタイルにする。
" Ctrl+Aで行頭へ移動
" Ctrl＋Bで一文字戻る
" Ctrl+Dでカーソルの下の文字を削除
" Ctrl+Eで行末へ移動
" Ctrl+Fで一文字進む
inoremap <C-A> <Home>
inoremap <C-B> <Left>
inoremap <C-D> <Del>
inoremap <C-E> <End>
inoremap <C-F> <Right>

" コマンドエイリアス
" ^MはCtrl+v,Ctrl+m
" noremap ,h :! jshint %
" noremap ,t :! prove -vl %
noremap ,pt :!perltidy %
noremap ,ptv :'<,'>!perltidy
map ,js :call JsBeautify()<cr>

" 日時の入力補助
:inoremap <expr> ,df strftime('%Y-%m-%dT%H:%M:%S')
:inoremap <expr> ,dd strftime('%Y-%m-%d')
:inoremap <expr> ,dt strftime('%H:%M:%S')

" コロンを識別子の有効な一部として認識させる
set iskeyword+=:

" コメントを見やすい色へ変更
hi Comment cterm=bold ctermbg=black

" neocomplcache
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_camel_case_completion = 0
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_min_syntax_length = 3

" eregex.vim
" nnoremap / :M/
" nnoremap ? :M?
" nnoremap ,/ /
" nnoremap ,? ?

" jslint.vim
" augroup MyGroup
"   autocmd! MyGroup
"   autocmd FileType javascript call s:javascript_filetype_settings()
" augroup END 
" 
" function! s:javascript_filetype_settings()
"   autocmd BufLeave     <buffer> call jslint#clear()
"   autocmd BufWritePost <buffer> call jslint#check()
"   autocmd CursorMoved  <buffer> call jslint#message()
" endfunction

" Yanktmp 
map <silent> sy :call YanktmpYank()
map <silent> sp :call YanktmpPaste_p()
map <silent> sP :call YanktmpPaste_P()

" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window. Protect against
" screwing up folding when switching between windows.
autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

" space + .
nnoremap <Space>. :<C-u>tabedit $MYVIMRC<CR>

" Syntastic settings
let g:syntastic_mode_map = {
\ "mode" : "active",
\ "active_filetypes" : ["javascript", "json"],
\ "passive_filetypes": [""]
\}

let g:syntastic_html_tidy_ignore_errors = [
    \ 'trimming empty',
    \ 'proprietary attribute "ng-if"',
    \ 'proprietary attribute "ng-model"',
    \ 'proprietary attribute "ng-submit"',
    \ 'proprietary attribute "ng-show"',
    \ 'proprietary attribute "ng-init"',
    \ 'proprietary attribute "spin"',
    \ 'proprietary attribute "spin-if"',
    \ 'proprietary attribute "ng-click"',
    \ 'proprietary attribute "ng-controller"',
    \ 'proprietary attribute "ng-repeat"',
    \ 'proprietary attribute "ng-app"'
\ ]
